# Simple workflow for deploying static content to GitHub Pages
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Print Environment
        run: |
          echo "NODE_ENV=$NODE_ENV"
          echo "Current directory: $(pwd)"
          node --version
          npm --version
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Run prebuild script
        run: node fix-tailwind.js || echo "Prebuild script failed, continuing"
      - name: Build with Next.js
        run: |
          echo "Starting build..."
          npm run build || (echo "Build failed, checking for issues..." && ls -la && cat package.json)
      - name: Create fallback if build fails
        run: |
          if [ ! -d "out" ]; then
            echo "Build directory not found, creating fallback static site"
            mkdir -p out
            cp -r public/* out/ || true
            echo "<html><head><title>Oaksfield Services</title></head><body><h1>Site Under Maintenance</h1><p>Our site is currently being updated. Please check back soon.</p></body></html>" > out/index.html
          fi
      - name: Create .nojekyll file
        run: touch out/.nojekyll
      - name: Copy CNAME file if exists
        run: if [ -f "CNAME" ]; then cp CNAME out/; fi
      - name: Debug build output
        run: ls -la out/
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 